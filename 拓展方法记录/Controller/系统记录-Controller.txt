HeadLine：

Ctrl_Base Controller的基类，拥有关联实体和update更新的虚函数。

Sys_Ctrl Controller的创建类，用来创建对应类型的Ctrl。拥有SD-DB体系。

Ctrl_Player 用于控制Player类的专用控制器，监听函数固定，拥有独立的DB_SD体系来为其提供参数。

Ctrl_Camera 实际上是Node的派生类，只用来控制Camera，实现比其他Ctrl体系优雅，但是不属于这个体系。

派生类记录：
Ctrl_Simple 实验用，无意义
Ctrl_MenuRandom 主菜单使用的控制随即移动的方法。

其余类为Ctrl_Base的派生类。

Ctrl_Base
父子节点：
父节点 Entity* 即要控制的Entity

无，派生类可能有

创建方法：
Sys_Ctrl创建Ctrl_Base时先依据 类型 选择使用 Player_Ctrl的函数还是Ctrl_Base的 函数，在Sys_Ctrl中有一个类型分派函数，然后依据该分配，调用对应的派生类的Create函数。（毫无疑问这是一个糟粕设计，但是目前还可以使用）创建后需立即setController使用，

管理方法&生命周期：
创建后只有自身实例，没有父节点，必须让实体使用setController操作后才可以retain()。实体可见其的两种Controller。Controller在删除时可以设为NULL。Controller有autorelease方法，在无主使用时自动销毁，如果创建不立即添加则会变成NULL。在active函数激活时设为实体的子节点，开始update函数的调用。
所以创建和set必须紧紧相连。

行使机制：
作为Entity的子节点，在update中依据初始化时设置的参数来控制父节点。
在active函数激活时设为实体的子节点，开始update函数的调用。
Controller实际上实现的是思考该做什么的问题，至于决定做什么之后，这件事具体地由StepCtrl完成。

特殊函数：
Ctrl拥有setFroze等函数用来处理特殊效果，和实体类的状态自动机有耦合。

Controller体系经过一些修改，只在创建方法上略有设计冗余。

Step_Ctrl：该类处理Ctrl的小操作，拥有P-H体系，在被调用时传入参数工作，每个类都是一个小的单例，执行瞬时动作。