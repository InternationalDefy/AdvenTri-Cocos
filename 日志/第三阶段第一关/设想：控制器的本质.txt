更抽象地想，控制器其实是一个三元组
(Map<ActionName,Action>,void*(func)getValue(ActionName),float Time)
它就像人脑一样进行控制的思考，一方面思考需要时间，执行需要时间，另一方面，人在思考时不外乎考虑以下几个问题：
1.有那些可以使用的操作
2.这些操作中应该选择哪一个，为什么

但游戏设计之困难在于，不能让程序完全按照完美思路进行，这样程序的无差演算会使难度过于巨大。
相反，如果AI体系破绽百出，只能做出很单纯的行为，那游戏将变得失去挑战性。

所以比抽象三元组更重要的一点是实现以下目的：
3.不能毫无破绽，也不能漏洞百出。

这三点的考虑只有在自身游戏机制极其成熟，并且极大程度地了解了自身游戏机制，才能够完美设计。
这是AdvenTri设计考虑的核心点，也是技能点。

AI之难，可以像格斗游戏的满级难度一样无懈可击，它们会使用强力的连招，算计甚至每一寸的距离，在DragonBallFighterZ游戏里它可以使玩家无力招架，
在NoHonor里，AI可以毫无破绽，玩家只可以靠招架输出。
NoHonor的AI无疑是失败的，玩家在高难度下任何进攻手段都会被化解，只能后手招架输出，
而低难度AI只是无规则定时重复一些简单的动作，破绽百出且轻松被破。
作为格斗游戏，游戏比主角为主体的ACT更容易提供优秀的AI，很大程度要AI识别对手的出招，并且不那么恰当的时机响应即可，（非完美响应）
格斗游戏的很大程度上需要 人类玩家 猜招， 而 No Honor的 三级AI ，最大问题在于 反应无敌快的同时， 不猜招

4.AdvenTri希望战斗拥有深度，那么猜招的思路可以运用其中。一个百分比的把控，一个提前拖后的时机，可能会使游戏拥有更大的变数。

一个合理的控制类，需要满足以上的四点条件，而当前的控制类需要改动加入时间的调整，然后在技能和玩法进一步完善之后再考虑。

关于技能设计的考虑：
