现在主菜单的效果并不如人意，问题集中表现在以下几个方面：
1：随机运动的时间应该是一个不同的值，不能使用定值
2：随机运动的物体颜色应该更暗一些
3：铅笔动画仍需调整。
4：单元件素材仍未完成。
接受素材・中仅有翻页动画可用。。。
5：主菜单的翻页动画？

1解决
2解决
3解决 但是铅笔画风还待考虑。

先不考虑45，先进行第一场景的创建和测试体系的搭建。

测试体系需要：
A 完全数据驱动的大关，
B 预加载每一个系统并且监控其加载情况
C 可以用一个特定的存档，打开特定的场景
D 存档编辑能力

*******************
以上为9月24日日志
*******************
昨天很傻逼，今天不能再浪费时间了。
对SD和csv文件都需要一些修改。
在SD中删除Delta属性，将其作为变量加入其他Ctrl的处理中。
这里有一个重大的问题，AI真的需要Delta吗？而SimpleCtrl又极有大范围修改Delta的可能。

这里，Ctrl系统最好还是完全重写。

我们，把Ctrl分为两部分，一部分表示 小动作的进行，确定无疑地比如移动，攻击面对方向某处，旋转至何角度，使用某种技能等。
另一部分 是统观全局的控制，对小动作进行调用，比如Ctrl_Simple按照csv文件定义的SD初始化，定时控制实体。

这需要两个P-H体系，一个静态实例控制小动作不牵扯实体逻辑，一个派生类实例作为子节点。

带着这个美好的愿望，硬着头皮重新实现Ctrl体系，今天的任务如此。

从数据库开始修改。数据库输入其实只需要让DB知道读入在此结束即可，不需要固定的点数，这样可以使其更加灵活。
修改完成，Debug未通过，之后的任务还有：
1：建立小动作的派生类体系
2：将大类的统一使用标准化。
DashVec2 和 TargetVec2 一定程度还有保留的必要，而优雅地实现它们，Controller需要监听事件。要也不要，可以通过计算得出。

数据库部分拓展完成，现在可以继续对
1：建立小动作的派生类体系
2：将大类的统一使用标准化。
问题集中考虑。

想了想主要是AnimationPack是否可用以及 直接函数调用？事件列表分发？的问题
前者的想法是 虽然在功能上AnimationPack可以实现任务，但是在命名意义上的耦合会加重，反正P-H体系对我来说轻车熟路，再一次建立也无需多言。
后者的想法是 直接函数调用可以使游戏逻辑更加清晰，纵使在效率和整体逻辑顺序的统一上会出现疑问，但是可以作为后期优化使用。

需建立新的P-H体系 BitCtrl，这时候考虑Ctrl_Base究竟做什么。
Ctrl_Camera和 Ctrl_Player都是直接继承Node类而来的，因而不用修改，这倒省事了。

Ctrl类进行了初步修改，进行第一次编译以确定逻辑上是否有问题。
Ctrl基类编译通过，可以进行派生类体系建立。

先实现两个基类出来，测试是否能够编译通过。刚才的问题源于宏定义没有换行。
在测试类里尝试是否能够实现内容的分派。
已经能够顺利执行操作，但是派生类还未实现。

不着急，先完善文档。
然后充洗澡卡，然后看长安竞技

*****************
以上为27日日志
*****************
回看一个月之前的日志，测试体系已经完成，并且Controller类得到了很完善的修改，现在需要在Controller的新体系中，进行控制器和操作的设定。
一个很大的问题是AI如何实现，将用数据驱动动作？还是用固定的行为设置参数并计算？这个问题可以在一些横板冲关游戏里进行思考。

AI设计的根本目的：给游戏一个刺激，快节奏，又不至于过于困难的 敌人实体控制
待解决的问题
A.模拟人的思维还是顺序执行形式。
前者是场景判断后执行某操作，
后者是忽视判断必然执行某操作，
B.反应时间的长短。
C.反应行为的判断。
D.是否考虑群体策略。
E.如何回应玩家的动作。

考量很多优秀的横板动作游戏。比如 1空洞骑士，2精灵与森林，3晶体管，4Unravel，5Rayman，它们在关卡设计和战斗上都很出彩。
战斗的设计和关卡形式是密不可分的，1245是平台跳跃型游戏，而3则是2.5D俯视视角，
考虑到AdvenTri的实现形式，可能是2.5D，固1245可以作为参考，但不是决定性取关。
总结5个游戏的AI形式：
1空洞骑士：
A 模拟人的形式：判断属性是玩家 和 该实体的距离 和 玩家的位置，判断后执行 移动 或 攻击（确定攻击方向）
B 

更抽象地想，控制器其实是一个三元组
(Map<ActionName,Action>,void*(func)getValue(ActionName),float Time)
它就像人脑一样进行控制的思考，一方面思考需要时间，执行需要时间，另一方面，人在思考时不外乎考虑以下几个问题：
1.有那些可以使用的操作
2.这些操作中应该选择哪一个，为什么

但游戏设计之困难在于，不能让程序完全按照完美思路进行，这样程序的无差演算会使难度过于巨大。
相反，如果AI体系破绽百出，只能做出很单纯的行为，那游戏将变得失去挑战性。

所以比抽象三元组更重要的一点是实现以下目的：
3.不能毫无破绽，也不能漏洞百出。

这三点的考虑只有在自身游戏机制极其成熟，并且极大程度地了解了自身游戏机制，才能够完美设计。
这是AdvenTri设计考虑的核心点，也是技能点。

AI之难，可以像格斗游戏的满级难度一样无懈可击，它们会使用强力的连招，算计甚至每一寸的距离，在DragonBallFighterZ游戏里它可以使玩家无力招架，
在NoHonor里，AI可以毫无破绽，玩家只可以靠招架输出。
NoHonor的AI无疑是失败的，玩家在高难度下任何进攻手段都会被化解，只能后手招架输出，
而低难度AI只是无规则定时重复一些简单的动作，破绽百出且轻松被破。
作为格斗游戏，游戏比主角为主体的ACT更容易提供优秀的AI，很大程度要AI识别对手的出招，并且不那么恰当的时机响应即可，（非完美响应）
格斗游戏的很大程度上需要 人类玩家 猜招， 而 No Honor的 三级AI ，最大问题在于 反应无敌快的同时， 不猜招

4.AdvenTri希望战斗拥有深度，那么猜招的思路可以运用其中。一个百分比的把控，一个提前拖后的时机，可能会使游戏拥有更大的变数。

一个合理的控制类，需要满足以上的四点条件，而当前的控制类需要改动加入时间的调整，然后在技能和玩法进一步完善之后再考虑。

关于技能设计的考虑：
