考察了ATW的数据架构，可以得出以下一些结论
对ATW的考察得出了全战的兵种数据库架构：
Boot.所有兵种信息的存储方式均为数据，预加载时完成所有操作（其中包括数据实例化），这解释了全战很高的CPU占用率，运行效率和极长的读取时间。
Boot.各个数据元之间的访问借由table和key实现，也有对Ref解析的数据元和unique_index存在。
1.兵种类的数据由几大组件（类？）数据和本身持有部分数据构成
组件类：战略地图UI，战略地图声音，战略地图模型数据，战术地图使用数据元（land_table navel_table）
本身数据：征募费，维护费，队伍人数。
未包含：征募条件，征募建筑等等应该包含在建筑之类的存在中。
2.land_unit数据元表示战术场景中某单位兵种的存现形式。
组建类：护甲（作用包含决定了其护甲值，和不同护甲的攻防动作判定），部队种类（步，骑，远，决定了其动作分组和作战属性判定），
动作模组（包含坐骑模组和步战模组），坐骑种类（计算其战斗能力且获取其属性），物理实体（包括坐骑和人物），
使用武器（只和战斗能力有关，因为动作模组已经被细分计算在动作模组里），盾牌种类（与战场属性和兵种显示均有关系），
旗官种类（决定战场旗帜的显示和旗官的形象），分组别（与配置兵种及战略显示有关），选取响应事件（与ui和选取效果有关）
本身数据：弹药量，行军点数，冲锋加成，攻防能力，步战能力（步兵没有步战形态，此处是000占位符），升级能力，弱点，自动分计算规则，藏匿能力，生命值，装填能力，
其设计遵循的原则：
1.宁废毋少，牺牲性能换取的拓展性。
2.绝大多数数据以key和table定义，牺牲性能换取的编辑性。
3.在确定数据库的分部和分组之前，务必先确认数据何时调用，何处调用，何者调用，为何调用，结果如何。