接30日日志，LaEmoji可能会有同样的问题，

LaEmoji有严重的问题，几乎至于毁灭级别，现在需要对laemoji全盘重写，将其实例存储方式改为数据存储

修改完成，考虑技能系统的内存管理问题

考虑结果：要使技能与entity共存，则可以将其加入Entity作为子节点，
要使技能自存，则将其加入layer

技能的添加与移除现已实现，可以以E_Skill为基类实现多继承来添加更多更丰富的技能，
但是物理实体的管理尚需一些考虑！

此外，程序结构的混乱已经到了很难以接受的地步了，明天一定要修理之！
此外，也许需要用table取代list
现在考虑动作模组的构建，需要animationpack类，先尝试用table构建之。

目前实现的breed类里，除了AnimationPack使用clone方法调用之外，其余全部是使用数据创建一个新的组件，
发现不出来什么问题但是值得记录以下。

AnimationPack已经实现！明天要好好优化一番！
*****************
以上为31日日志
*****************
仅以好好优化给去年画一个句号吧。
现在需要对程序经行一番重构和优化，同时写一些自己能够看得懂日志出来。

考虑第一个问题：
一个数据数据核心还是多个数据元：
一个：+更便捷的内存管理 +更多得复用代码 -更复杂的访问操作 -重复编译 -数据元都做了这么多了复用个锤子代码！
一个数据元基类，多个派生类？
基类派生类：+更便捷得单例实现 +真・复用代码 +统一内存管理 -强耦合
尝试基类派生类
现在实现了AnimationPack的派生类
派生类构建注意：
1.注册，2.其他类的使用
3.可能需要宏使用instance和create

使用宏构建了CREATE_DB（）；
测试中发现动作会重复，可行的解决方案是从实体类判断或事件监听判断，但是就现在而言，数据库是比较可靠的了。

现在开始修改数据库的其他类
思考：AnimationPack究竟有没有存在的意义！？
+方便访问 +方便管理 +统一设计
-占用内存 -内部逻辑复杂 -内存管理堪忧 -Animation可以被直接访问
修改，AnimationPack不存储Animate* 改为存储AStringData*，因为创建动作是在AStringData中实现的，而实体持有Animation在使用时才调用clone()方法

目前屏蔽掉了一些对Animationpack等数据元的调用，先修改数据中枢，再修改数据元。

还有physics等方法，Unit等。。。。。。。实在不想再做了，放假以后继续，也当时对程序的温习吧。