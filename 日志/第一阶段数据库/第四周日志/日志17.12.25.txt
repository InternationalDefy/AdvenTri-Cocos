catogeMask contacttestmask collisionmask（按顺序）要在shape的数据类中定义！
Dynamic也在ShapeData中定义
楼上傻逼，Dynamic是Body的属性，
突然意识到这东西不能设置偏移量且Body还有很多重要属性，写法还要改！
Body的各种属性仍要在PhysicsData.csv中定义！

实现数据中枢，下午应该可以完成实体创建并添加操作。

数据核心可以利用面向过程的StartAnalyse MiddleAnalyse EndOfLineAnalyse简化代码！

现已实现了基础控制器和物理数据与Entity的结合，现在任务是优化程序结构

结构化方法须知：已经实现的数据元无需再使用，未实现的结构元可以在ControllerData中获取原版
*****************
以上为24日日志
*****************
从底层写起，突然发现dynamic_cast似乎没有必要

不过可选的实现方法是在BreedList中加入表示controller类型的string活着id

内存管理的问题：
1.物理实体并没有被移除->考察物理与实体的关系寻找解决方案
2.二次操作会崩溃->极力避免二次操作？使remove操作在非parent操作中也是内存安全的？
避免而此操作：脏标记模式，下一轮更新时在vector中erase，

注意：Controller和Physics应当是持有数据而非持有实例：如果返回指针会出现共用指针的崩溃情况

解决方案有2：
1.实现clone方法
2.实现数据持有而非实例持有

以方法2实现Controller和Physics，方法1用于LaEmoji

着手开始Animation，使用和PhysicsBody类似的方法

animation可能对多个实例调用，也可能被单个实例多次调用，故每次使用时都要创建一个新的?或者使用animation原代的clone()方法
使用原带的clone()方法，在Data中保存animation的实例列表，
考虑到巨大的内存占用量，在animationData中不应存储实例，应该存储名字数据，在掉用时使用get方法返回实例。
这个方法不一定高效，但是可以选择plist或者在场景创建时预载animation

Animation类已经实现且实现比较完善，可以当作之后的借鉴类使用 