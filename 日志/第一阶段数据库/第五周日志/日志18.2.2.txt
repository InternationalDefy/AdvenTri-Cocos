
今天先对各部分文件进行分类，再考虑Ref的建立和命名修改

当前方略：一个.h文件只包含其父类的.h头文件，使用类用声明，在其.cpp文件中包含该部分的Ref文件和使用部分的Ref2文件
及其自身的.h头文件？
完成了ControllerRef，其余以其为模板

=目前完成了除Entity意外的Ref，在LaEmoji里发现的问题，不论是否使用class声明，都需要非常分散但耦合的程序类名定义
1：Vs在修改类名时可以使用Ctrl+H 2：使用DEF文件和宏定义

这里需要关注一个问题：在建立Ref_和Ref2文件时的差异
Ref2包含Ref_+本体输出外其余部分+使用额外部分
Ref_包含本体输出部分
这么做的目的：为了避免重复Include

现在发现的一个新问题：最初修改的数据核心对ANimaiton，Physics等的调用还是id形式，目前先屏蔽，后续进行更改。

更重要的一个问题：分出行为元和数据元的的界限，例如Weapon和W_Breed

Ref头文件设置现已完成，饭后回来改名
Skill也许需要自己的Ref文件。

现在可以使用Ctrl+H方便地改名了。

以后创建新的数据元-数据核心-运行模型时要注意融入当前体系
1：文件命名 SD_ DB_ M_
2：使用基类的已有宏和调用库 public DB: public SD:
3：在.h文件中声明使用Class
4：建立Ref文件，在Ref中注册并在.cpp中使用

Working的形式一定程度提升效率，但还是要注意融入体系可以避免一些弯路。

对原DB对Animation Physics等名称调用进行修改

对.csv文件名进行改动 统一为Table_Xxx List_Xxx Ref_Xxx形式

修改完成！！！

*****************
以上为29日日志
*****************

今天着手于Player类的构建和操作系统的实现，先在ProcessOn上设计

修复eskill类的访问形式