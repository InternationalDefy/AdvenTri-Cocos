先对wB AB中对body的调用进行拆东墙补西墙式的拙劣修改。

拆东补西并不存在，问题在于.csv数据文件中的耦合很严重，对数据文件中的name和ID进行修改
同时：修改其他数据元的时候要关注Name 和 ID 的转变

完成对Physics数据核心的修改，尚需修改的还有：

controller？
LaEmoji？
~这两个数据元具有比较强的独立性，数据核心对它们进行逐个访问也在编辑时有益
~这两个数据元实际上需要比较强的拓展，对数据核心的修改其实可以建立在逐一访问的基础上
~如果不修改，对数据核心的访问可能会很乱
~这两个数据元具有相对独立性的同时，其余部分的调用比较多
决定修改，并且使用ID和Name的双访问？
如何实现？Vector&&Map
注意存储的是数据所以占用资源量不大，这个解决方案是可行的。

都需要进行修改，LaEmoji数据文件的拓展性很低，Controller的糅合性太强
Controller进行修改先，
Controller使用一个ControllerSD的数据元和ItemSD数据元对不同种类进行统一处理，这种形式需要保留
但是对不同种类的定义会比较糅杂，在ControllerSystem里，对ControllereSystem进行修改，使其以行列形式呈现，

ControllerRef的去留：删去！

先对ControllerBase基类进行修改。

先对StringData进行修改，ControllerStringData和PhysicsStringData要作为派生类出现，
基类使SD_item和包含SD_item的SD_base

ControllerData在item变化时收到了巨大的耦合影响，故需要重写。待

Controller类的改制基本实现，现在的问题是
1、整合性
2、对ControllerSystem继续考量

当前阶段剩余问题：
1：对PhysicsItem进行同样方式的修改
2：把ControllerSystem整合到ControllerDB中
3：仿照ControllerRef的形式建立新的Ref类

先尝试对System的整合
ControllerSystem 目前只能够完成取建的内容，数据元都可以实现，一个System应当是以更加远大的目的而存在的（虽然目前不清楚，但是这个类应当保留）
并且应该将DB类极尽简化，经量地几乎不访问或者判断性访问，这样才有益于上下级解耦。
PhysicsStringData目前不用修改

现在先对Ref进行构建从而实现头文件的易于管理和分类

预采用的分类方法：
1：按程序部分分类
物理 实体 技能 音效 语言 等等
2：按程序结构分类
数据库 数据元 单模型 运行元 运行核心 管理系统

1：
+有相对清晰的结构，在一部分功能进行改动时便于访问
-各元的糅杂关系很严重，跨块修改会对头文件改动较多
S：建立跨块使用的多重Ref头文件集？

2：
+跨块访问更加便宜
-同块访问容易不知所措
S：建立同块相互连接的Ref头文件集？以及需要一个同块之间相互引用的导航性文件

考虑S1 和 S2的难度 复杂性和 耦合性
难度相当 均很小
复杂性 S1>S2 因为要考虑多重文件
耦合性 S1<S2 

选用S1方案
对多重文件经行设计
ProcessOn

关于Ref的设计构想
将Ref文件放在一个筛选器中， 每种文件的部分块使用自己的Ref
均放在Ref筛选器中
Ref_*Part* 某Part所输出的Ref
Ref2*Part* 某Part所使用的Ref
*****************
以上为28日日志
*****************
今天先对各部分文件进行分类，再考虑Ref的建立和命名修改

当前方略：一个.h文件只包含其父类的.h头文件，使用类用声明，在其.cpp文件中包含该部分的Ref文件和使用部分的Ref2文件
及其自身的.h头文件？
完成了ControllerRef，其余以其为模板

=目前完成了除Entity意外的Ref，在LaEmoji里发现的问题，不论是否使用class声明，都需要非常分散但耦合的程序类名定义
1：Vs在修改类名时可以使用Ctrl+H 2：使用DEF文件和宏定义

这里需要关注一个问题：在建立Ref_和Ref2文件时的差异
Ref2包含Ref_+本体输出外其余部分+使用额外部分
Ref_包含本体输出部分
这么做的目的：为了避免重复Include

现在发现的一个新问题：最初修改的数据核心对ANimaiton，Physics等的调用还是id形式，目前先屏蔽，后续进行更改。

更重要的一个问题：分出行为元和数据元的的界限，例如Weapon和W_Breed

Ref头文件设置现已完成，饭后回来改名
Skill也许需要自己的Ref文件。

现在可以使用Ctrl+H方便地改名了。

以后创建新的数据元-数据核心-运行模型时要注意融入当前体系
1：文件命名 SD_ DB_ M_
2：使用基类的已有宏和调用库 public DB: public SD:
3：在.h文件中声明使用Class
4：建立Ref文件，在Ref中注册并在.cpp中使用

Working的形式一定程度提升效率，但还是要注意融入体系可以避免一些弯路。

对原DB对Animation Physics等名称调用进行修改

对.csv文件名进行改动 统一为Table_Xxx List_Xxx Ref_Xxx形式

修改完成！！！