仅以好好优化给去年画一个句号吧。
现在需要对程序经行一番重构和优化，同时写一些自己能够看得懂日志出来。

考虑第一个问题：
一个数据数据核心还是多个数据元：
一个：+更便捷的内存管理 +更多得复用代码 -更复杂的访问操作 -重复编译 -数据元都做了这么多了复用个锤子代码！
一个数据元基类，多个派生类？
基类派生类：+更便捷得单例实现 +真・复用代码 +统一内存管理 -强耦合
尝试基类派生类
现在实现了AnimationPack的派生类
派生类构建注意：
1.注册，2.其他类的使用
3.可能需要宏使用instance和create

使用宏构建了CREATE_DB（）；
测试中发现动作会重复，可行的解决方案是从实体类判断或事件监听判断，但是就现在而言，数据库是比较可靠的了。

现在开始修改数据库的其他类
思考：AnimationPack究竟有没有存在的意义！？
+方便访问 +方便管理 +统一设计
-占用内存 -内部逻辑复杂 -内存管理堪忧 -Animation可以被直接访问
修改，AnimationPack不存储Animate* 改为存储AStringData*，因为创建动作是在AStringData中实现的，而实体持有Animation在使用时才调用clone()方法

目前屏蔽掉了一些对Animationpack等数据元的调用，先修改数据中枢，再修改数据元。

还有physics等方法，Unit等。。。。。。。实在不想再做了，放假以后继续，也当时对程序的温习吧。

*****************
以上为1日日志
*****************

目前暂不修改数据csv文件的名字，需要等完成数据元修改之后

完成对EBreedData类的修改

已完成修改的数据核心：
amor_breed
animation_pack
animation
e_breed
weapon_breed
unit_breed

对PhysicsShapeList的修改已经完成了，但是要去泡妞，所以先跑路了
物理表尚存没有修改的部分
1：对PhysicsShape数据核心的调用操作（主要在Body里）
2：Body类

完成对Body类内和对PhysicsShape数据核心的调用操作，
现在的问题是W_Breed A_Breed等类还有对Body的调用形式没有改变
考虑解决方案，解决方案应当满足的目的
1：对数据核心类有封装性，不用在修改核心类时对数据元进行大部分修改
2：数据元对核心有聚合性，不用在重写数据核心时对数据元大规模修改
3：数据核心之间具有独立性，其相互调用和Include要最简约的形式出现
现有解决方案：
1：根本没有实现 2：较好实现 3：中规中矩
考虑两种解决方案
1：
（1）在命名时保持解耦
（2）用统一格式实现数据元
可能的方案：数据元基类->create set get操作间解耦，用Name实现访问
可以在数据核心聚合结束之后对数据元进行修改，待试，目前使用更加非拙劣的屏蔽法，好于胡乱修改。
2：不改 
3：
Ref类将核心的.h文件引用在一起，就可以实现最小规模的修改
++Ref文件修改容易 --大规模.h可能不易分类Ref
需要一定的经验但是值得尝试，决定使用