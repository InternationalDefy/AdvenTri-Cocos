今天对事件响应函数的注册做数据化处理

对响应器添加分拣类和执行类，类似DispatchParser处理，

似乎事件的分发没有问题，但是响应函数不能正确的bind。

其实bind正确地发生了，但是响应函数再bind的过程中使用了即将被释放的空指针。

响应函数的注册现已事件，记录增加解析的方法：
1：在Ref_Cbhandler中注册
2：继承自M_callbackHandler
3：在M_callbackHandler的handle函数中添加Case项3
4：修改继承虚函数。

注意
1：事件响应是一个链的形式，单种事情的添加不足以实现完整的监控
2：dispatchparser类cbparser类均被addChild给了父类，dispatcher给了其所属的实体类，callback给了其layer类，则需要注意
a：内存管理，注意在响应一个事件并消除其时，要移除listener并 removefromparent
b：场景切换，要remove事件的listener
这ab尚未实现，后天准备做之

考虑其eventSystem的管理方案，
1：有的callback只需运行一次，运行一次之后应该移除它
2：有的callback需要运行多次，但有运行的时间间隔
3：有的callback需要运行多次，但有运行的逻辑间隔
4：各种callback之间有明显的先后触发关系
这些管理问题的解决也许需要一个派生类系统，以最简单的parser为基类，同时需要修改.csv文件

但考虑到以下问题：一个响应是一个完整的链，末端和初始的断裂都会影响响应的执行。
综合性能与逻辑两方面考虑，应当在初始端监控其存在。
或是在EventSystem中考虑其管理的可用函数和可行方案。

*****************
以上为23日日志
*****************

今天考虑到Sonic Mania的摄像机处理方案，利用其帮助考虑摄像机处理方案。

初步想法：
1：每帧移动系数，可以通关设置改变。
2：每帧对所锁定的Node检验位置，并判定是否移动以及移动方向。
3：对改方向移动，用SetPosition的方式，并更新winsize

初步实现，可以修正winsize，对锁定node有检验，问题
1：20/F的移动速度太快，当物体低速时换帧会顿卡。
2：未能考虑完全如何与原移动系统结合。

解决考虑 
1：计算系数？低速高速分流移动方案？
低高速分流方案枪毙 因为方向的判定太复杂且即使方向问题得以解决，移动系数的设置也难以圆滑

计算系数方案需要一个补正系数，不然会导致摄像机不移动的问题，目前设置补正系数为0.05
用绝对值计算系数似乎不是一个明智之举。因为方向的所在也有有所影响。

考虑了很久以后继续使用直接移动法，但是对速度限制有一些考虑，最好，镜头高度也有一定影响，设置应该多多留心。
