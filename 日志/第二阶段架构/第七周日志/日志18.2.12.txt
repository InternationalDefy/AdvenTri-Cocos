今天把摄像机左右边界的移动锁定改为bool的形式，这样在镜头高度改变时不会造成bug误移
设置方法上每移动一个屏幕要使用函数setBorderLimited设置，可以用事件监听机制实现，也可以在场景初始化时设置参数。

今天要着手于事件监听系统的实现，先在ProcessOn上进行设计，考虑一下问题：
1：事件监听机制如何与已有事件系统结合。
2：监听机制的核心：谁在监听，监听谁，监听何种行为，如何发送消息，如何响应消息，

设计思路：先研究Cocosd原带的事件机制。

在网上和书中的学习有以下几点需要注意的地方：
1：内存删除的方法：
for循环中找寻，如果找到，erase，break，出来release
2：在场景切换时要注意即时移除eventdispatcher

重读设计模式，这里考虑一个问题：
状态模式也许可以更好的解决实体行为的事，这里因为实体

ProcessOn上设计不能够满足我了，在纸上铅笔画。

*****************
以上为11日日志
*****************

今天要配合铅笔画的设计图，来初步构建事件系统，最好能完全实现。

先完成了数据库，遵循在纸上的设计，今天晚上考虑解释器的构建，先去吃晚饭~

准备把EventSystem用来dispatchEvent，下面构建一些分析类，SD仅作为数据出现。
构建Handler类和分离类，目前不清楚使用Switch关系（上下级调用） 还是基类派生类关系（父子类调用，虚函数实现）

M_Handler类进行Switch语句分派（？或者设计一个Enum类）然后调用子类创建返回，利用虚函数实现绑定。
暂时不用这个想法，使用Sys进行分派，Handler只作为基类而非管理类，为了避免方法混乱。

闭门造车做的都是些无用功，现在重新考证一番，觉得事件系统应该具有四个数据库，DB_dispatcher管理事件的分发，DB_callback管理响应函数和对应的参数使用，DB_event管理分发的事件和其传递何种参数，以及DB_eventListener持有SD_dispatcher（s）和SD_callback（s），是一个数据组合，其使用方法是：添加到实体上为其构造监听方法，发送事件，和回调函数。而Sys则管理其四个数据库的取用和事件的添加方法。同理，其eventlistener也可以添加到场景类里，实现对除了实体之外他者的调用和操作。

今天完成了四个数据库，明天要开始Sys以及其下属复杂的回调方法体系的构建，甚至一天完成它，因为有KCD!!!!!!!!