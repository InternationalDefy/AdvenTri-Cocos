今天考虑Listener的注册方法。要注意Listener监听的是各种事件。所以定义方法要多加注意。

建立M_dispatchHandler作为分类类，M_dispatchParser作为解析类基类

在Ref2EventSystem.h里注册Ref_DHandler.h

现在可以通过handler注册了，但是解析方法仍需考究，比较性能有问题，

增加解析方法：
1：在Ref_Dhandler中注册
2：继承自M_dispatchHandler
3：在M_dispatchHandler的handle函数中添加Case项

解析类现已实现，定义解析方法：
1：修改DH中的Update函数实现监控
2：修改DH中的InitWithSD实现初始化异化

*****************
以上为22日日志
*****************
今天对事件响应函数的注册做数据化处理

对响应器添加分拣类和执行类，类似DispatchParser处理，

似乎事件的分发没有问题，但是响应函数不能正确的bind。

其实bind正确地发生了，但是响应函数再bind的过程中使用了即将被释放的空指针。

响应函数的注册现已事件，记录增加解析的方法：
1：在Ref_Cbhandler中注册
2：继承自M_callbackHandler
3：在M_callbackHandler的handle函数中添加Case项3
4：修改继承虚函数。

注意
1：事件响应是一个链的形式，单种事情的添加不足以实现完整的监控
2：dispatchparser类cbparser类均被addChild给了父类，dispatcher给了其所属的实体类，callback给了其layer类，则需要注意
a：内存管理，注意在响应一个事件并消除其时，要移除listener并 removefromparent
b：场景切换，要remove事件的listener
这ab尚未实现，后天准备做之

考虑其eventSystem的管理方案，
1：有的callback只需运行一次，运行一次之后应该移除它
2：有的callback需要运行多次，但有运行的时间间隔
3：有的callback需要运行多次，但有运行的逻辑间隔
4：各种callback之间有明显的先后触发关系
这些管理问题的解决也许需要一个派生类系统，以最简单的parser为基类，同时需要修改.csv文件

但考虑到以下问题：一个响应是一个完整的链，末端和初始的断裂都会影响响应的执行。
综合性能与逻辑两方面考虑，应当在初始端监控其存在。
或是在EventSystem中考虑其管理的可用函数和可行方案。