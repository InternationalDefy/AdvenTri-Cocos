1 需要组织一个UI层，一个场景添加两个层，Ui系统作为一个单例而出现，使用getInstance方法来获取一个拥有参数调用的合适的UI层
2 在Sys_UI中组织一个数据库DB_UI多层级逻辑结构。表示已有UI的实现材质和使用方案，有很多的注释行。而UILayer以及各种初始化图像。参数等的设置在Sys_UI中实现
3 载入页面也可以通过Sys_UI设置其形态，同时作为不同于UILayer的类LoadingScene出现，在MainSceneLoading时使用回调函数创建MainScene，但是。
效率问题未知，是否能双线加载资源未知。这里需要考虑：先做实验考虑其效率如何，如果不行，则只能手动双线程。
4？ 使用类似于对象池模式的方法处理场景类和UI层的互动。UI层对场景类是部分可见的，场景类持有UI层的实例指针。场景类对UI层不可见。UI层拥有部分public方法向其添加UI元件，可以被场景类调用。场景类中的元素，包括实体，逻辑实体等需要使用UI的场景元件持有UI系统数据库中的UI Set（实质是StringData）实体类对UI层不可见。场景类在创建实体时利用其UISet数据元 向UI层派发信息，并将其对应的指针传送给UI元件的构造器中作为初始化参数而使用。此过程可能需要由全局可见的Sys_UI来完成。
4？ 考虑观察者模式已经实现和游戏固有的信息派发机制：可以在场景层派发信息给UI层，在UI层的每一个元件创建并初始化时添加其监听器。如此设计需要考虑一个对话框的完全实现问题：通常情况下的表情表述更多的是在场景层的动作而非UI层沟通的实际UI，而对话发生时则进入对话框状态？这样不好，以为丧失了艺术性实现的可行性和灵活性。那应该如何保持UI层同步？又保证绝大多数UI逻辑在UI层中？
如果完全使用观察者模式实现，那么只要有UI实现，每个实体的每一步都需要信息的派发。效率堪忧。
5 很显然我们需要一个能够由脚本控制的类来处理 对话类，也许叫做 M_Speech 而，M_Speech应该是场景层的还是UI层的组件呢？

4 设计决定
使用观察者模式实现。
在游戏逻辑上是需要修改UI的操作，完全由UI层完成，其使用事件监听机制，用派发事件和注册监听器的形式实现场景层和UI的双向沟通。
场景类在完全实现的时候也可以将ListenerSet作为一个类而使用。
这里要注意维护一个事件信息表。记录不同事件的派发者和接收者以避免误操。

5 设计决定
普通的言语，类似FuckU之类的出现作为场景类的一部分而存在，属于实体的子节点。
场景需要一个对话状态，但不一定是对话框状态，而是对话触发状态。当前状态启动UI层的Controller，并且设置Swallow，实体层的Controller依然可以使用但是选取事件会被Swallow。操作实体离开则可以结束对话，以派发事件的形式使UI层DisableController，同时结束对话触发状态。
对话状态的进入和退出，牵扯到相机视角的变换，这里自然需要UI层持有主角类的指针，用以访问和控制相机控制器。相机控制器的外部接口有用啦！希望我还没删掉它。

*****************
以上为3日日志
*****************
依据以上设计和ProcessOn上的类图，今天的目标时起码实现Item和Menu
建立了一部分文件和Ref体系，现在考虑SD中的内容应该是什么。
SD_UIItem
1 string name,string type,int numberOfSprites(n),
2->n+1 textureName[i] animationPackName[i]
SD_UIMenu
1 string name,bool callActived(是否立即激活),int numberOfItems(n),
2 string enterAnimationType,int enterAnimationParams(m),1->m Params[i],
3->n+2 string textureName[i],bool activeEnterAnimate,float posx,float posy,int Opecity,
两数据库现已实现。
*****************
以上为7日日志
*****************
今天要实现M_UIMenu和M_UIItem的属性设置和解析器配置。也许需要在Enum类里添加类别解析
对Response即时设计的一种解析，
1 Response函数添加多种重载，其意在可以方便并排查错误的执行Response操作
2 Response操作处理的是Item的内部逻辑，设置Response状态，进行Response动画等 并不处理其具有的外部逻辑。
3 Response的外部逻辑在Menu和Item两个层面都有，实际上以ListenerCall即EventSys的外部接口实现。
4 AnimationPack应当拓展，因为需要很多独立的Action，如Active Response ResponseEnd DeActive

现在为了建立能够创建并测试UIItem功能的类而创建SysUI

似乎DB UIItem没有合理的处理 offsetPos，添加新属性。

成功的创建了Item 但是对ListenerSet的设置和由Menu控制的组合位置动画操作尚不明晰。先写实验报告，溜了。