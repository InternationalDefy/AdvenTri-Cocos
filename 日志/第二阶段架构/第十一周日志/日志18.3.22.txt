物品系统的实现必须有以下几个元素
1：物品栏 2：逻辑物品类 3：实体物品类 4：物品存档系统
其中 
1：有一个实例被实体所持有，其包含一个Map？Vector？管理物品在背包或者装备栏里的位置，需要和UI结合。也许Sys_Item提供一个UI访问方法？
注意物品栏和存档系统相关还和State相关，使用

2：物品类的内存储形式，拥有物品调用方法的指针，和物品方法紧密相关。需要DB SD。是否需要实体？如果记录，是数据形式还是实例形式？
A 持有对使用方法函数 的调用记录
B 有DB 和SD来定义行为
B 需要一个Drop操作。
C 需要一个拓展方法体系
D 持有对实体物品类的记录，应当是string形式的名称，std::string _dropItemEntityName

3：物品实体在 使用 丢弃 捡拾 等操作时所需要和游戏场景及其他实体互动的实体。
继承自Entity类，属于I Entity
A 三种操作并不使用同一实体 
B 需要不同的函数操作如判断捡拾 碰撞判定碰撞回调函数等
C 需要一个可以供其余实体访问的创建方法，有自己的DB SD 
D 最终问题回归到其他实体系统中 有自己的PhysicsBody和对应的回调方法 在EvePhysics中定义和记录。

Sys_Item 持有 DB_ItemState逻辑物品数据库实例 DB_ItemEntity实体物品类数据库实例
以后还需要持有存档系统实例？
提供创建对DB中SD实例数据的访问用于创建逻辑类或实体类的实例
提供物品栏UI更新和存档系统的访问方法
有效的外部操作直接访问Sys而非DB
提供利用SD构造逻辑类以及实体类实例方法，即拥有解释器实例
先从DB开始构建。

思考：DB_ItemState DB_ItemEntity SD_ItemState SD_ItemEntity需要持有哪些数据
以下的Animation仅指Item所使用的而非Entity使用的
SD_ItemState 
//有一些属性可能要在UI系统中使用，比如鼠标移上去之后的播放声音，或者Texture显示以及变化。
//还有一些属性和逻辑操作有关系，如usingAnimation dropCallfunc等需要在M_ItemState中实现，也许需要数据元定义。
string Name,string UiSetName,string EntityName,float usingTime,string usingAnimateName,string pickUpAnimate,drop callfunc(可以为Default) numberOfDropCallfuncparam params,numberOfuseCallfunc(k) 以下1->k int UseCallfuncUseCallfuncType,NumberOfParam,ItemCallfuncType[i] params,
SD_ItemEntity
string Name,string TextureName,string StateName,string PhysicsBody,float dropDelay,string dropAnimationName,string flyingControllerName,string FlyingEndCallfuncName,int Numparams,1->p params,

实现了SD_ItemState SD_ItemEntity DB_ItemState DB_ItemEntity
*****************
以上为19日日志
*****************
今天的目的是依据已有的DB和SD和Sys在Sys层面实现创建ItemEntity的操作，M_ItemEntity继承自Entity应当是一种实体的形式出现，需要controller和ListenerSetFunc
但它更加类似于N_Entity，不具有Entity的Debuff和Damage属性
考察实体类的基类属性，包括Controller，Physics，Texture。而一个M_ItemEntity需要实现的属性和方法包括：
Controller* _FlyingController 继承在Entity中
PhysicsBody* _ItemBody 继承在Node中
ListenerSet* _listenerSet 需要添加实现
CallFunc* _flyingEndCallfunc 目前重点
修改SD和DB和CSV 把敌人DropItem和主角ThrowItem区分开来。使用不同的Controller
似乎出现了相互包含的问题，编译中出现了无法继承Entity类的情况，先使用重新生成尝试。
没有什么用，但是把Entity.h包含进ItemEntity.h 解决。但还是要担心以下以后的问题。
实现了ItemEntity类的添加解析和调用，考虑State和Entity的结合实现Item类，但是需要一个物品栏类将两者结合在一起，
物品栏类必须要一个UI系统的支持，这已经是刻不容缓的实现了，现在还需要把NPC类和析构器予以完善。

NPC类设计：
类似于Enemy类但是没有那么丰富的方法。
-amor -weapon -debuff -skills -state
~animationPack ~listenerSet ~controller ~uiSet
+speak +Map<AdvenTriEnum::DamageType,bool> volunableTo
NPC类需要一个类似于Enemy的Debuff体系？来控制是否消亡？否！直接控制VolunableTo即可。