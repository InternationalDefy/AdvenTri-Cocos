怠工永远都不是意见好事，今天要好好努力。消除无聊的妄想吧，现实才是应当面对和可以改善的。

考虑到SD_Scene和SD_GameLayer的实现形式与SplashScene相当，但是要加入脚本。先从SD_Scene实现起。

这里注意一个问题，因为DB在访问csv文件时很容易越界且没有合适的排错机制，这是设计上的一个疏漏。。。一开始就有问题。
所以避免这种疏漏代来灾难性后果的一种得当方法是逐个排查DB，也就是每次拓展，需要修改大规模多个DB时，从底层细枝末节出开始DB
逐一修改并尝试。
同时对于n、 m的设置要格外留心。

完成了DB_Scene，现在用类似的方法实现DB_GameLayer.
决定！UI的更新由UI系统实现，内部逻辑函数 调用Sys_UI生成新的套组。
成功实现新的带脚本数据库

数据库完成之后思考GameScene和UIScene的关联以及如何正确地使用Sys结合数据库系统生成。

这里需要参照上月24日日志。

1 背景设计：
背景必然分为两类，有实体的和无实体的，无实体称background，仅仅以Sprite形式出现，可以使用场景类直接定义
有实体的是NPC类，包括破坏，事件分发，对话进入等功能在其中实现，以M_NPC形式出现，使用场景类定义其name来创建
2 地形设计：
（？）地形实际上是Sprite材质+逻辑函数监听的集合，可以通过以下逻辑方法实现？Terran类？通过脚本形式添加范围监听？
一个场景需要设计一个边界值，这个边界会阻拦实体的通过，可以以PhysicsBorder的形式实现
3 事件机制：
利用已有的事件机制实现派发事件，使用ListenerSet进行事件派发的设计，对于每个Entity设计不同的CallbackParser
每一个场景持有自己独有的ListenerSet
在内存管理机制上，重写GetLayer函数，return自己。
4 单位设置：
一部分实体可以直接以开始时设置的形式，在场景初始化时进行设置，在需要其运行的时候打开其控制器。
一部分体需要依靠脚本创建，故不在开始时加载素材，靠事件触发将其出现，并播放入场动作即Enter方法。
5 类似机关和动态：
依靠NPC类实现，但是为了区分机关类NPC和对话类NPC应该在SD中把他们分开定义。
6 运镜及UI
场景类必要持有cCtrl实例，运镜操作时逻辑暂停（由场景类实现）
UI类也需要调用场景的逻辑暂停。
7 SD定义
目前尚不清楚具体的SD设置方法，但是
可以毕竟肯定的是需要使用一个引用表，而其余文件则都是单文件表示一个SD因为场景类内容太多。
8 存档系统关联
存档系统和场景的创建初始化相关，例如存档得到善恶值来判断创建风格，可能会因为一个数值的不同创建截然不同的场景
而且需要使用的存档系统值将不只是善恶值，可能在之前遇见的一些事会触发不同的场景设计，
此处仅指场景设计上的不同，当然也有可能出现这种情况：同一NPC说的语言不同，而非不同的NPC，这个问题可以给NPC类以及其DialoguePack处理
但是最好的处理方案是将 与存档系统沟通的内容 集成在 一个系统 中实现，那场景类就是最佳选项了。
在SD？DB中需要一个脚本解析系统（该来的终究还是逃不掉了）
9 进出以及切换方法
需要提供其余场景类可以调用的外部接口，SplashScene的处理方案等 故一定需要一个enter quit函数作为外部接口
而且本场景可能使用 不同的退场方式， 退至不同的场景，这些可以作为enter quit函数的参数调用
10 特异化场景的实现
需要一个场景管理器类，其管理场景的生成和切换，以及通过SD设置不同的UI之类的操作 
如果出现了标志为特异场景的场景，就调用特异场景的创建方案。
为了方便的使用各种外部接口，大致可以设计继承结构如下
特异场景 : public 场景基类
模式化场景 : public 场景基类
场景基类 : public Layer
场景管理器 : public Ref
管理器中有如下方法
public:
nextScene(编号？名字？)
中间有SplashScene的调用
private:
Scene* createSceneWithSpecailLayer(参数们)
{
SpecailLayerX::create();
可以设置一个SpecailLayerMap?
}
Scene* createSceneWithUsualLayer(参数们)
{
Scene* createWith模式化方法
}
这就决定了DB一定是一个引用表，而每个场景独占单SD才是其核心部分。
但也有可能特异化场景也需要SD设置参数，不过问题是。。。使用的是何种SD？以及SD的设置方案？
通过以上的设计考虑，在ProcessOn上设计SceneManager为核心的数据层级结构

完成了层级结构的设计，主要方法应该标注一些，但那是睡起来以后的事了。。。
主要类方法
-Sys_Save

-Sys_Scene
private:
DB_Scene* _db;
DB_SplashScene* _dbs;
M_SceneScriptParser* _parser;
Sys_Save* _save;
Sys_UI* _ui;
DB_Scene*&SD_Scene包含的是有脚本在其中的SD，经过解析之后变成另一个类返回，即 NSSD_Scene*无脚本SD
DB_SplashScene*同理
private:
Scene* createSceneWithSD(NSSD_Scene*) 
{Scene* sc=Scene::create();NSSD->getType()? gamelayer=createSpecialLayer(NSSD)?gamelayer=createLayerWithSD(NSSD);
uilayer=getUILayer(NSSD_Scene*);addChidl(gamelayer);addChild(uilayer);}
M_GameLayerCommon* createLayerWithSD(NSSD)
{return GamerLayerCommon::create(SD);}
M_GameLayerSpecial* createSpecialLayer(NSSD)
{return XXXSpecialLayer::craete(SD);}
UI_Layer* getUILayer(NSSD_Scene*)
{return UI_Layer::reate(SD);}
Sys_Scene* create();
bool init();
public:
Sys_Scene* getInstance();
void nextScene(const std::string& name)
{SplashScene::createWithNextLayer(name);}
当SplashScene进入后，在OnEnter方法中调用getScene()
Scene* getScene(const std::string& name);
{getSD;_parser->parse(SD);createSceneWithSD;}

-M_GameLayerBase
public Layer
private:
bool _isPaused;
cCtrl* cameraCtrl;
Node*(WithPhysics) Border;
Node*(WithPhysics) cameraBorder;
UI_Layer* ui;
ListenerSet*(以Parsers和Dispatcher作为子节点形式出现)
LaEmojiPack*(即以浮动字形式出现的LaEmoji的预载，其运行可以被设为到何时自动移除，通常只有一页)
//也许使用类似AnimationPack中的HitAnimation的形式实现。
public:
update(float){_children->update(dt);}
Scene* createScene(NSSD);
bool init(NSSD);
void pauseUpdate(bool);
void pausePhysics(bool);
void pauseLayer(bool);

其中NSSD的考虑现在没有必要，使用脚本判断是非和单元添加生成的方式。
其余的设计还是有借鉴价值的。

要实现场景系统类，需要先实现Base场景类和其继承类。
突然发现问题，需要在DB_GameLayer中添加Border有关项目。
在DB_GameLayer中完成添加Border项目，下一步是仿照HelloWorldScene完成一个场景类的基类。
注意存留存档系统的接口。

*****************
以上为27日日志
*****************
今天的目标是利用已有的HelloWorld类和上述的Scene体系，实现一个标准的GameLayer基类。

考察HelloWorld类的方法，包括。

1场景创建，2层创建，3更新方法，4按钮回调
其中，按照设计。
1应该由场景系统实现，同时配合对UI层的关联。
2应该由GameLayer自身实现，其派生类要拓展其派生方法。
3应该由实体类和各自的更新实现，但是场景类需要一个统一调用的函数。
同时，直接添加为场景类子节点的类，需要保证场景类的GetLayer方法返回的是自身。
4应该由UI层实现，在场景系统生成场景类时对UI进行分配以选择合适的UI，通过信息分发的形式实现两层之间沟通
（观察者模式）
2的具体操作包括：
A 主角类的生成 ，技能设置，位置设置。（存档关联）
B 敌人类的生成，技能设置，位置设置，入场设置。（实体系统和存档关联。入场时使用事件监听机制）
C 背景的设置。（场景类基础方法，由场景系统完成）
D 场景事件监听器注册。（场景类的基础方法，由场景系统完成）？有可能在特异化场景使用特异化处理。
E 物理事件监听器注册。（场景类的基础方法，由场景系统完成）？有可能在特异化场景使用特异化处理。

场景基类如此，场景系统在生成其时仍需使用SplashScene调用。
SplashScene的生成：
A 背景精灵的设置。（场景系统来设置?）
B 由SplashScene主控的Scene的创建。（由场景系统完成？）
C 在其中设置新Scene的对象。（将相关SD作为参数调用传入其中？）
对以上ABC三项进行考量，其实这里需要对场景类基类和场景系统设置友元。