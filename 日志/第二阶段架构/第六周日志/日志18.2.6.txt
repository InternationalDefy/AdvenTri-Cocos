通过实验看键盘值监听
1：大小写不分 2：LCTRL RCTRL LSHIFT RSHIFT区分

通过实验看鼠标监听 
getCursor可以直接返回到GL系里的窗口XY值

以下构建一个控制系统，需要考虑的问题如下：
1：鼠标移动控制转向
2：键盘按键控制移动
3：shift space开启技能模式
4：左右键的攻击键

逐一思考其解决方案：
1：可以利用预先工程里的资源，先进行尝试。

发现问题：之前的Amor所以跟随Entity是因为addChild了，和update无关。

mouse的Rotation已经设置完成，正右方是0点且标准的设置函数在M_pCtrl中有之。

2：键盘控制移动
需要考虑的一个问题：是否使用可更改的存档按键。
-写死并不是一个很大的问题 
-拓展按键和修改可能会妨碍到UI的简洁性。
？多按键和手柄支持可以用宏实现？
决定使用宏实现。
现已使用宏实现，并将force改为Impulse形式，在update里施加，此种方法：
+解决了暂停使用的问题  +便于修改按键  -现阶段操作手感异常蛋疼 +数据修改可以调整之

这里的实现是比较优雅的。技能可以用类似的形式，调用时使用_pressed[keycode]访问。

开始对Player类的技能类进行设计，设计具体见ProcessOn

现在一定要开始技能模块的数据核心了。

需要实现的包括：
1：不同等级的技能对同一技能方法进行不同参数的调用
2：参数需要一定的可调整性，以避免在数值调整时过多的重复编译
3：每个技能实现不同的功能，使用不同数量，不同类型的参数
4：可能需要一个解析系统？（如果技能数目有限则可以手动实现）

依据存档系统或初始化设置pSkill的实例于m_player类里作为调用，skill的创建则由SD_pskill和DB_pskill完成。

实现playerStringData类，构建了Ref体系，目前尚未实现依据SD创建PSkill

pCtrl的继承有误，应当继承SD_Item

应该使用Items，因为SD所使用的不只是int，还有可能float，targetname等。

pSkill的数据库搭建已完成！

*****************
以上为5日日志
*****************

今天要实现一个可拓展的技能系统：先实现技能类的基类和派生类系统。借鉴E_Skill
借鉴E_skill实现p_skill类，实现中注意：1：技能的创建时间，2：update方法将如何调用，3：技能由何者创建，
目前问题：没有完整的Player类，所以无法继续p_skill类中与player有关的方法。
先对Player类进行简单的继承设计。
用类似的方法构建了M_Player类，注意：AnimaitonPack.h没有包含在Ref_Animation中，所以进行了一次Ref调整
现在开始着手于player skill的派生类
当然需要实现一个update方法，但这不是目前需要考虑的问题

基本上实现了数据元构建，现在考虑一些内部逻辑。
控制器和技能类现已实现，并且记录拓展方法于ProcessOn

本应当继续item或者pbreed，但是现在LaEmoji发现了巨大的问题。
有必要重写LaEmoji，这是一个可怕的工程量，但是我们要跨越他！

找到了问题发生的原因：在Update函数的for循环中改变了Vector的Size，查以前所做的程序，似乎也有类似的事情。
但是，问题的重点在于：之前的程序也将部件添加为Layer的Child却没有直接在同一循环中进行访问。

只要在循环之前设置好循环变量的边界，就不会有问题。

把技能类成功实现，Player类尚需以下系统：pBreed event ui camera item
Pbreed由于牵扯到存档系统，可能需要后续进行实现
item应该归于物品系统 也牵扯到存档系统 待后续实现
event 和 ui是另两大模块 待后续实现
camera 类明天开始尝试。