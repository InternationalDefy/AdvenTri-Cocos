今天要实现一个可拓展的技能系统：先实现技能类的基类和派生类系统。借鉴E_Skill
借鉴E_skill实现p_skill类，实现中注意：1：技能的创建时间，2：update方法将如何调用，3：技能由何者创建，
目前问题：没有完整的Player类，所以无法继续p_skill类中与player有关的方法。
先对Player类进行简单的继承设计。
用类似的方法构建了M_Player类，注意：AnimaitonPack.h没有包含在Ref_Animation中，所以进行了一次Ref调整
现在开始着手于player skill的派生类
当然需要实现一个update方法，但这不是目前需要考虑的问题

基本上实现了数据元构建，现在考虑一些内部逻辑。
控制器和技能类现已实现，并且记录拓展方法于ProcessOn

本应当继续item或者pbreed，但是现在LaEmoji发现了巨大的问题。
有必要重写LaEmoji，这是一个可怕的工程量，但是我们要跨越他！

找到了问题发生的原因：在Update函数的for循环中改变了Vector的Size，查以前所做的程序，似乎也有类似的事情。
但是，问题的重点在于：之前的程序也将部件添加为Layer的Child却没有直接在同一循环中进行访问。

只要在循环之前设置好循环变量的边界，就不会有问题。

把技能类成功实现，Player类尚需以下系统：pBreed event ui camera item
Pbreed由于牵扯到存档系统，可能需要后续进行实现
item应该归于物品系统 也牵扯到存档系统 待后续实现
event 和 ui是另两大模块 待后续实现
camera 类明天开始尝试。

*****************
以上为6日日志
*****************

发现一个问题：LaEmoji和Controller的按键监听没有swallow：也许在后续的UI层中解决该问题，毕竟LaEmoji理应只出现在UI层中。
现在需要考虑的是摄像机系统的构建。
将要实现的目的：
1：只对实体层和背景层生效，UI层无效。
2：支持对某一实体的跟随操作
3：可以通过函数调用使其变换位置
4：可以通过函数调用变换高度
5：在指定的位置停止行动
6：对不同层有不同的移动系数

先对Camera类进行考虑和研究：
1：Camera类属于Scene非Layer
2：Camera随移动可以用update里的setposition实现
3：Camera可以利用Layer类里设置_follow bool来控制其是否移动或者函数移动时将其置反
目前的问题：
1：MousePosition仍然时窗口位置，与实际位置设置的Position有差异（m_pctrl）
2：远近景问题。

解决方案：
1：在PCTRL类中加入ViewPostition类表示当前Entity在Layer中的Position，除了开始设置值之外，其它的函数也应当考虑到对其修改（也许应该改为Entity的属性？）。
2：mousePosition经过ViewPosition的设置得以正常，考虑到不只有Rotation要MousePosition，所以将其在Update里即时修改。
楼上部队，Update里即时修改会对一个mousepos进行无数次逻辑错误的修改，
替换解决方案：mousepos表示mouse在游戏世界里的实际位置，是一个每帧修正的量，而GLmouseview则表示mouse在窗口的位置，是一个改变监控量。

关于远近景问题：
1：设置每个实体和不同背景的PositionZ可以实现远近景的设置，具体的效果和数值设计应该可以计算。
2：遮挡只与Zorder有关，positionZ决定了远近景但是不会影响遮挡，所以Zorder和PositionZ设置要注意区分。
3：目前是实验类，需要考虑不同positionZ和Zorder具体应当在何处设置。
4：摄像机有一定的视距，超出了视距则会消失。

以下开始对Camera高度和PositionZ设置的定量探究。
先使用测试类探究CameraZ高度。
720P Z:622 1080P Z:933 1440P: Z:1245
基本上摸索清楚了摄像机机制。记录于图2.7

物理实体抖动问题十分严重：
1：实际上是更新方法没有使用缓冲模式导致的
2：1.6+引擎解决了抖动问题，但是impulse和force的设置乱得一塌糊涂切是接口无法修改。
3：0.4-版本没有抖动问题，但是相机机制不完善。
4：明天尝试使用4-版本，今天发现0.8版本可以通过修改更新频率使抖动明显降低。
5：但是修改更新频率会使CPU占有率明显提升。

不用明天尝试了，3.3版本OK，且可以使用摄像机机制，明天移植。