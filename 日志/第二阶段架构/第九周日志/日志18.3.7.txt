最难办的事来了，目前的HandleInput操作似乎和我HandleInput的体系不一样。。。修改？不修改？
如何实现不修改的方案？修改该如何修改？

再看书，还有一个问题是具体操作的实现
比较具有可行性的一种方案是：
1：update函数中判断时间的缩进（避免计时器的混淆）
2：对不同行为仅有调度作用并不是以直接操作其内部逻辑的形式出现。
如 访问player->useItem（） 但不定义 useItem（）的内部代码

父子类等级结构现在已经完成，加入了StateTag方便判断退出和来自何种状态以决定使用何种函数

考虑：
1：Enter和Exit操作应当各司其职不要越权，但是又难以判定其删除与被删除的关系，所以是否需要在player类中执行其转换操作？还是把它作为子节点来自行执行转换操作？
2：是否要创建一个Enum操作类，表示实际操作而非直接输入？

问题1：
++这样可以有效避免进出双操作的耦合
+这样可以增强可读性
这里考虑一个HurtAction的解决方案，hurtAction不仅表示受到伤害，还应当表示出伤害的数值和种类便于后续计算，这里显然不能够完善的实现，如果单单传递一个ID的话。而且State也应该包含OnFire OnPosion OnFrozen等状态，所以
1：需要双状态State，一个表示自身状态，一个表示负面状态
2：实体本身还需要一个能够表示其收到伤害种类和数值的属性，在出现外部操作需要时直接进行设置，然后调用onHurt方法，默认不设置为无属性，和伤害一点。

定义了一批直接使用的函数，和间接访问方法。

isHurting parry skill 等计时器，理应放在Player里，所以应当修改当前设计？
改！

skill似乎没有cooldown设置参数，现在DB_Skill和SD_Skill中增添项

妈也，我已经把冷却和吟唱时间封装到Skill类里了！
这样会导致很多的重复，应当把技能写出来。写在主角类里，则技能类应当提供一个getCoolDownTime的方法查询冷却时间。

技能类的更新方法改写？不！不需要更新方法了，技能类现在只保存一个表示冷却时间的float

成功的把系统剥离出来了。现在需要实现冷却器。

关于技能：gathering应当是Ready状态，Active以后才计算冷却时间

Parry也需要一个CoolDown控制系统 可能还需要一个Parry类？控制Parry的Type或者冷却或者持续时间？
决定了！但留到明天再实现 #熊猫捂脸

考虑到如此设置，attack和parry都再skill中才对。
改用Map表示skill

以simpleAttack为例，实现成功，明天开始补全工作。

*****************
以上为6日日志
*****************
在增加一个状态类为Debuff类

这个问题难以解决。。。。
1：以内变量的形式处理 2：写出一个Debuff类的派生体系
1：
++便于实现
+便于访问所有实体类的数据
--极难进行数值上的拓展
-当变量增多时维护逻辑复杂
2：
--难于实现
-难于访问实体类数据
？想要数值拓展还需要深入数据库修改
++维护逻辑简便

内变量形式设计方案：
1：以一个Enum内变量实现状态的表示
2：以一个float计时器表示当前状态持续的时间
float计时器在状态改变时改变
利用其在更新方法的状态更新中   对不同状态在一定时间内的行为进行分派
3：当float达到状态上限时间时，状态执行切换操作，包括：
动画的更新 逻辑的更新：状态时间重置 状态的改变（enum）
4：当外界的某种伤害给予实体时，状态需要依据此伤害的种类进行改变，
执行操作：
动画的更新 逻辑的更新：状态时间重置 状态的改变
5：所谓动画的更新包含退出状态的动画和新进状态的动画，其需要由不同前后状态进行分派处理。
6：位于某种debuff状态的实体被消亡时，执行该状态对应的消亡方式：
特有的消亡动画 逻辑上的更新（如统计等）